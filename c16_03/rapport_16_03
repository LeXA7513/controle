============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: /home/stidsem4/iut/2021/controle/axel.autogue/c16_03
collected 7 items

test_16_03.py F.FFFFF                                                    [100%]

=================================== FAILURES ===================================
_____________________________ Test1603sute.test_10 _____________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_10>

    def test_10(self):
        try:
>           from .main  import Note

test_16_03.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    # Question 4
    # Question 4 c
    def moyenne_tuples(liste,nom=None,matiere=None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x[0] == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x[1] == matiere or matiere == None]
        res = [x[2] for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
    # Question 4 a
    print(moyenne_tuples(notes,"eleve1",))
    
    # Question 4 b
    print(moyenne_tuples(notes,"eleve1","math"))
    
    
    # Question 5
    class Note:
      def __init__(self, eleve, matiere, valeur):
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    
      def afficher(self):
        print('Eleve:', self.eleve, 'Matiére :', self.matiere, 'Note :', self.valeur)
    
      def __str__(self):
        return f"Eleve: {self.eleve} Matiére : {self.matiere} Note : {self.valeur}"
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
    Note.afficher(onote)
    onotes = []
    
    
    for a in notes:
      onotes.append(Note(a[0],a[1],a[2]))
    
    for x in range(len(onotes)) :
      Note.afficher(onotes[x])
    
    # Question 6
    
    for x in range(len(onotes)) :
      print(onotes[x])
    
    # Question 7
    
    notea = ('LeXA', 'art', 17)
    noteb = ('LeXA', 'poterie', 11)
    notec = ('LeXA', 'dessin', 14.5)
    noted = ('Patrick', 'art', 18)
    notee = ('Patrick', 'dessin', 8)
    notef = ('Gérard', 'dessin', 12)
    noteg = ('Gérard', 'dessin', 11.5)
    noteh = ('Gérard', 'art', 16)
    
    notes_enregistrées = [notea, noteb, notec, noted, notee, notef,noteg,noteh]
    
    # À la fin de la méthode init une ligne pour ajouter la note que vos venez de créer à la liste. Elle est referencée par self. ???????????????????????
    
    # Question 8
    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x.matiere == matiere or matiere == None]
        res = [x.valeur for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
>   print(moyenne_Notes(notes_enregistrées))

main.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

liste = [('LeXA', 'art', 17), ('LeXA', 'poterie', 11), ('LeXA', 'dessin', 14.5), ('Patrick', 'art', 18), ('Patrick', 'dessin', 8), ('Gérard', 'dessin', 12), ...]
nom = None, matiere = None

    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
>       liste_eleve= [x for x in liste if x.eleve == nom or nom == None]

main.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca581a7c0>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_10>

    def test_10(self):
        try:
            from .main  import Note
        except:
>          assert False
E          AssertionError: assert False

test_16_03.py:96: AssertionError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
_____________________________ Test1603sute.test_4 ______________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_4>

    def test_4(self):
        try:
>           from main import moyenne_tuples
E           ImportError: cannot import name 'moyenne_tuples' from 'main' (/home/stidsem4/iut/2021/controle/axel.autogue/main.py)

test_16_03.py:16: ImportError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_4>

    def test_4(self):
        try:
            from main import moyenne_tuples
        except ImportError:
            try:
>               from .main import moyenne_tuple as moyenne_tuples

test_16_03.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main.py:90: in <module>
    print(moyenne_Notes(notes_enregistrées))
main.py:84: in moyenne_Notes
    liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca58bd700>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
_____________________________ Test1603sute.test_5 ______________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_5>

    def test_5(self):
        try:
>           from .main  import Note, onotes

test_16_03.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    # Question 4
    # Question 4 c
    def moyenne_tuples(liste,nom=None,matiere=None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x[0] == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x[1] == matiere or matiere == None]
        res = [x[2] for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
    # Question 4 a
    print(moyenne_tuples(notes,"eleve1",))
    
    # Question 4 b
    print(moyenne_tuples(notes,"eleve1","math"))
    
    
    # Question 5
    class Note:
      def __init__(self, eleve, matiere, valeur):
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    
      def afficher(self):
        print('Eleve:', self.eleve, 'Matiére :', self.matiere, 'Note :', self.valeur)
    
      def __str__(self):
        return f"Eleve: {self.eleve} Matiére : {self.matiere} Note : {self.valeur}"
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
    Note.afficher(onote)
    onotes = []
    
    
    for a in notes:
      onotes.append(Note(a[0],a[1],a[2]))
    
    for x in range(len(onotes)) :
      Note.afficher(onotes[x])
    
    # Question 6
    
    for x in range(len(onotes)) :
      print(onotes[x])
    
    # Question 7
    
    notea = ('LeXA', 'art', 17)
    noteb = ('LeXA', 'poterie', 11)
    notec = ('LeXA', 'dessin', 14.5)
    noted = ('Patrick', 'art', 18)
    notee = ('Patrick', 'dessin', 8)
    notef = ('Gérard', 'dessin', 12)
    noteg = ('Gérard', 'dessin', 11.5)
    noteh = ('Gérard', 'art', 16)
    
    notes_enregistrées = [notea, noteb, notec, noted, notee, notef,noteg,noteh]
    
    # À la fin de la méthode init une ligne pour ajouter la note que vos venez de créer à la liste. Elle est referencée par self. ???????????????????????
    
    # Question 8
    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x.matiere == matiere or matiere == None]
        res = [x.valeur for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
>   print(moyenne_Notes(notes_enregistrées))

main.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

liste = [('LeXA', 'art', 17), ('LeXA', 'poterie', 11), ('LeXA', 'dessin', 14.5), ('Patrick', 'art', 18), ('Patrick', 'dessin', 8), ('Gérard', 'dessin', 12), ...]
nom = None, matiere = None

    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
>       liste_eleve= [x for x in liste if x.eleve == nom or nom == None]

main.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca58a9b20>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_5>

    def test_5(self):
        try:
            from .main  import Note, onotes
        except:
>           assert False
E           AssertionError: assert False

test_16_03.py:35: AssertionError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
_____________________________ Test1603sute.test_6 ______________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_6>

    def test_6(self):
>       from .main import Note, onotes

test_16_03.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main.py:90: in <module>
    print(moyenne_Notes(notes_enregistrées))
main.py:84: in moyenne_Notes
    liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca58bb250>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
_____________________________ Test1603sute.test_8 ______________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_8>

    def test_8(self):
        try:
>           from .main import Note

test_16_03.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
main.py:90: in <module>
    print(moyenne_Notes(notes_enregistrées))
main.py:84: in moyenne_Notes
    liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca5772d30>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
_____________________________ Test1603sute.test_9 ______________________________

self = <c16_03.test_16_03.Test1603sute testMethod=test_9>

    def test_9(self):
        try:
>           from .main  import Note

test_16_03.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    note1 = ('eleve1', 'math', 13)
    note2 = ('eleve1', 'physique', 15)
    note3 = ('eleve1', 'math', 13)
    note4 = ('eleve1', 'eco', 12)
    note5 = ('eleve1', 'eco', 13)
    note6 = ('eleve1', 'math', 12)
    note7 = ('eleve2', 'math', 13)
    note8 = ('eleve2', 'math', 14)
    
    notes = [note1, note2, note3, note4, note5, note6,note7,note8]
    
    # Question 4
    # Question 4 c
    def moyenne_tuples(liste,nom=None,matiere=None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x[0] == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x[1] == matiere or matiere == None]
        res = [x[2] for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
    # Question 4 a
    print(moyenne_tuples(notes,"eleve1",))
    
    # Question 4 b
    print(moyenne_tuples(notes,"eleve1","math"))
    
    
    # Question 5
    class Note:
      def __init__(self, eleve, matiere, valeur):
        self.eleve = eleve
        self.matiere = matiere
        self.valeur = valeur
    
    
      def afficher(self):
        print('Eleve:', self.eleve, 'Matiére :', self.matiere, 'Note :', self.valeur)
    
      def __str__(self):
        return f"Eleve: {self.eleve} Matiére : {self.matiere} Note : {self.valeur}"
    
    onote = Note('eleve1', 'maths', 13)
    print(onote.eleve)
    print(onote.matiere)
    print(onote.valeur)
    Note.afficher(onote)
    onotes = []
    
    
    for a in notes:
      onotes.append(Note(a[0],a[1],a[2]))
    
    for x in range(len(onotes)) :
      Note.afficher(onotes[x])
    
    # Question 6
    
    for x in range(len(onotes)) :
      print(onotes[x])
    
    # Question 7
    
    notea = ('LeXA', 'art', 17)
    noteb = ('LeXA', 'poterie', 11)
    notec = ('LeXA', 'dessin', 14.5)
    noted = ('Patrick', 'art', 18)
    notee = ('Patrick', 'dessin', 8)
    notef = ('Gérard', 'dessin', 12)
    noteg = ('Gérard', 'dessin', 11.5)
    noteh = ('Gérard', 'art', 16)
    
    notes_enregistrées = [notea, noteb, notec, noted, notee, notef,noteg,noteh]
    
    # À la fin de la méthode init une ligne pour ajouter la note que vos venez de créer à la liste. Elle est referencée par self. ???????????????????????
    
    # Question 8
    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
        liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
        liste_matiere= [x for x in liste_eleve if x.matiere == matiere or matiere == None]
        res = [x.valeur for x in liste_matiere ]
        moy = sum(res)/len(res)
      return moy
    
>   print(moyenne_Notes(notes_enregistrées))

main.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

liste = [('LeXA', 'art', 17), ('LeXA', 'poterie', 11), ('LeXA', 'dessin', 14.5), ('Patrick', 'art', 18), ('Patrick', 'dessin', 8), ('Gérard', 'dessin', 12), ...]
nom = None, matiere = None

    def moyenne_Notes(liste,nom = None,matiere = None):
      res = []
      liste_eleve=[]
      for a in liste :
>       liste_eleve= [x for x in liste if x.eleve == nom or nom == None]

main.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7fdca58a1af0>

>   liste_eleve= [x for x in liste if x.eleve == nom or nom == None]
E   AttributeError: 'tuple' object has no attribute 'eleve'

main.py:84: AttributeError

During handling of the above exception, another exception occurred:

self = <c16_03.test_16_03.Test1603sute testMethod=test_9>

    def test_9(self):
        try:
            from .main  import Note
        except:
>          assert False
E          AssertionError: assert False

test_16_03.py:89: AssertionError
----------------------------- Captured stdout call -----------------------------
13.0
12.666666666666666
eleve1
maths
13
Eleve: eleve1 Matiére : maths Note : 13
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : physique Note : 15
Eleve: eleve1 Matiére : math Note : 13
Eleve: eleve1 Matiére : eco Note : 12
Eleve: eleve1 Matiére : eco Note : 13
Eleve: eleve1 Matiére : math Note : 12
Eleve: eleve2 Matiére : math Note : 13
Eleve: eleve2 Matiére : math Note : 14
=========================== short test summary info ============================
FAILED test_16_03.py::Test1603sute::test_10 - AssertionError: assert False
FAILED test_16_03.py::Test1603sute::test_4 - AttributeError: 'tuple' object h...
FAILED test_16_03.py::Test1603sute::test_5 - AssertionError: assert False
FAILED test_16_03.py::Test1603sute::test_6 - AttributeError: 'tuple' object h...
FAILED test_16_03.py::Test1603sute::test_8 - AttributeError: 'tuple' object h...
FAILED test_16_03.py::Test1603sute::test_9 - AssertionError: assert False
========================= 6 failed, 1 passed in 0.13s ==========================
